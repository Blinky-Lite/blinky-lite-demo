[
    {
        "id": "465cfd27.107674",
        "type": "tab",
        "label": "tutorial-dma",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c43c3f4a.7aaaa",
        "type": "tab",
        "label": "gg-scale-dma",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2e881513.b5db6a",
        "type": "tab",
        "label": "geiger-dma",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "Blinky-Lite-Tutorial",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "ddd272b6.33c42",
        "type": "mqtt-broker",
        "z": "",
        "name": "MQTT-dma",
        "broker": "broker.shiftr.io",
        "port": "1883",
        "clientid": "tutorial-dma",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "a617aefc.4918d",
        "type": "arduino-board",
        "z": "",
        "device": "/dev/ttyACM0"
    },
    {
        "id": "db9f4882.52c9f8",
        "type": "mqtt-broker",
        "z": "",
        "name": "Shiftr",
        "broker": "broker.shiftr.io",
        "port": "1883",
        "clientid": "gg-scale-01-dma",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "e166c63b.f066a8",
        "type": "serial-port",
        "z": "c43c3f4a.7aaaa",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": true,
        "responsetimeout": ""
    },
    {
        "id": "6ca1b8a9.c3e618",
        "type": "serial-port",
        "z": "",
        "serialport": "/dev/ttyACM1",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": true,
        "responsetimeout": ""
    },
    {
        "id": "d19247ac.b91cc8",
        "type": "ui_tab",
        "z": "",
        "name": "Geiger",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "262b6cae.fe0b94",
        "type": "mqtt out",
        "z": "465cfd27.107674",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "true",
        "broker": "ddd272b6.33c42",
        "x": 1170,
        "y": 200,
        "wires": []
    },
    {
        "id": "87b969ce.fb53b8",
        "type": "function",
        "z": "465cfd27.107674",
        "name": "Adapt to MQTT",
        "func": "return {'topic':'tutorial/dma/' + msg.topic,'payload':msg.payload};",
        "outputs": 1,
        "noerr": 0,
        "x": 1000,
        "y": 200,
        "wires": [
            [
                "262b6cae.fe0b94"
            ]
        ]
    },
    {
        "id": "6243729.bae208c",
        "type": "mqtt in",
        "z": "465cfd27.107674",
        "name": "",
        "topic": "tutorial/web-app/red/#",
        "qos": "0",
        "broker": "ddd272b6.33c42",
        "x": 140,
        "y": 240,
        "wires": [
            [
                "25ee484a.aa07a8"
            ]
        ]
    },
    {
        "id": "25ee484a.aa07a8",
        "type": "json",
        "z": "465cfd27.107674",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 370,
        "y": 240,
        "wires": [
            [
                "174ff73a.4e0499"
            ]
        ]
    },
    {
        "id": "174ff73a.4e0499",
        "type": "function",
        "z": "465cfd27.107674",
        "name": "Parse MQTT",
        "func": "var topic = '';\nif (msg.topic == 'tutorial/web-app/red/ledState') topic = 'red/ledState';\nif (msg.topic == 'tutorial/web-app/red/ledToggle') topic = 'red/ledToggle';\nreturn {'topic':topic, 'payload':msg.payload};",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 240,
        "wires": [
            [
                "ae0ea12a.6f83d"
            ]
        ]
    },
    {
        "id": "b107d91b.d14b08",
        "type": "function",
        "z": "465cfd27.107674",
        "name": "Button Debouncer",
        "func": "if (msg.payload == 0) return null;\nvar thisPress = new Date().getTime();\nvar lastPress = context.get('lastPress');\nif (lastPress == undefined) lastPress = 0;\nif ((thisPress - lastPress) < 500 ) return null;\nvar ledState  = flow.get('red/ledState');\nledState = ledState + 1;\nif (ledState > 2) ledState = 0;\ncontext.set('lastPress',thisPress);\nmsg.topic = 'red/ledState';\nmsg.payload = ledState;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 120,
        "wires": [
            [
                "ae0ea12a.6f83d"
            ]
        ]
    },
    {
        "id": "f2184265.5872d",
        "type": "arduino in",
        "z": "465cfd27.107674",
        "name": "Button",
        "pin": "8",
        "state": "INPUT",
        "arduino": "a617aefc.4918d",
        "x": 90,
        "y": 120,
        "wires": [
            [
                "b107d91b.d14b08"
            ]
        ]
    },
    {
        "id": "d83d4f80.21f96",
        "type": "inject",
        "z": "465cfd27.107674",
        "name": "",
        "topic": "red/ledState",
        "payload": "1",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "x": 500,
        "y": 80,
        "wires": [
            [
                "ae0ea12a.6f83d"
            ]
        ]
    },
    {
        "id": "b8d60c77.daaf1",
        "type": "arduino in",
        "z": "465cfd27.107674",
        "name": "Pot",
        "pin": "0",
        "state": "ANALOG",
        "arduino": "a617aefc.4918d",
        "x": 90,
        "y": 180,
        "wires": [
            [
                "2273880a.9427a8"
            ]
        ]
    },
    {
        "id": "2273880a.9427a8",
        "type": "function",
        "z": "465cfd27.107674",
        "name": "Pot Blocker",
        "func": "var lastReading = context.get('lastReading');\nif (lastReading == undefined) lastReading = -1;\nvar deltaReading = Math.abs(msg.payload - lastReading);\nif (deltaReading < 10 ) return null;\ncontext.set('lastReading', msg.payload);\nmsg.payload = Math.round(100.0 * (5.0 / 3.3) * msg.payload / 1024.0);\nmsg.topic = 'red/ledIntensity';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 180,
        "wires": [
            [
                "ae0ea12a.6f83d"
            ]
        ]
    },
    {
        "id": "d0d6c694.6f0bc8",
        "type": "inject",
        "z": "465cfd27.107674",
        "name": "Blinker",
        "topic": "blinker",
        "payload": "",
        "payloadType": "date",
        "repeat": "0.05",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 520,
        "y": 280,
        "wires": [
            [
                "ae0ea12a.6f83d"
            ]
        ]
    },
    {
        "id": "ae0ea12a.6f83d",
        "type": "function",
        "z": "465cfd27.107674",
        "name": "LED Controller",
        "func": "if (msg.topic != 'blinker') flow.set(msg.topic, msg.payload);\nvar ledValue = context.get('ledValue');\nif (ledValue == undefined) ledValue = -1;\nvar ledIntensity = flow.get('red/ledIntensity');\nif (ledIntensity == undefined) ledIntensity = 90;\nvar ledState = flow.get('red/ledState');\nif (ledState == undefined) ledState = 1;\nvar ledToggle = flow.get('red/ledToggle');\nif (ledToggle == undefined) ledToggle = 250;\nif (msg.topic != 'blinker')\n{\n    if (ledState == 0)\n    {\n        ledValue = 0;\n    }\n    if (ledState == 2) \n    {\n        ledValue = Math.round(ledIntensity * 255.0 / 100.0);\n    }\n}\nelse\n{\n    ledValue = -1;\n    var counter = context.get('counter');\n    if (counter == undefined) counter = 0;\n    if (ledState == 1)\n    {\n        if (counter == 0)\n        {\n            ledValue = Math.round(ledIntensity * 255.0 / 100.0);\n        }\n        if (counter == ledToggle)\n        {\n            ledValue = 0;\n        }\n    }\n    counter  = counter + 1;\n    if (counter > (ledToggle * 2)) counter = 0;\n    context.set('counter',counter);\n    \n    msg = null;\n}\nvar ledMsg = {'topic':'ledValue', 'payload':ledValue};\nif (ledValue < 0) ledMsg =  null;\nreturn [ledMsg, msg];",
        "outputs": 2,
        "noerr": 0,
        "x": 780,
        "y": 180,
        "wires": [
            [
                "d9704691.6989e8"
            ],
            [
                "87b969ce.fb53b8"
            ]
        ]
    },
    {
        "id": "d9704691.6989e8",
        "type": "arduino out",
        "z": "465cfd27.107674",
        "name": "Led",
        "pin": "10",
        "state": "PWM",
        "arduino": "a617aefc.4918d",
        "x": 970,
        "y": 140,
        "wires": []
    },
    {
        "id": "811444e.8abb8b8",
        "type": "inject",
        "z": "465cfd27.107674",
        "name": "",
        "topic": "red/ledToggle",
        "payload": "25",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "x": 490,
        "y": 40,
        "wires": [
            [
                "ae0ea12a.6f83d"
            ]
        ]
    },
    {
        "id": "b30a5728.842888",
        "type": "function",
        "z": "465cfd27.107674",
        "name": "Adapt to MQTT",
        "func": "return {'topic':'tutorial/dma/' + msg.topic,'payload':msg.payload};",
        "outputs": 1,
        "noerr": 0,
        "x": 1000,
        "y": 540,
        "wires": [
            [
                "3bf58a9c.eb74a6"
            ]
        ]
    },
    {
        "id": "3bf58a9c.eb74a6",
        "type": "mqtt out",
        "z": "465cfd27.107674",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "true",
        "broker": "ddd272b6.33c42",
        "x": 1170,
        "y": 540,
        "wires": []
    },
    {
        "id": "5af8e016.56367",
        "type": "mqtt in",
        "z": "465cfd27.107674",
        "name": "",
        "topic": "tutorial/web-app/green/#",
        "qos": "0",
        "broker": "ddd272b6.33c42",
        "x": 130,
        "y": 580,
        "wires": [
            [
                "e16ebd3.0855d4"
            ]
        ]
    },
    {
        "id": "e16ebd3.0855d4",
        "type": "json",
        "z": "465cfd27.107674",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 370,
        "y": 580,
        "wires": [
            [
                "87b5a93.5351858"
            ]
        ]
    },
    {
        "id": "87b5a93.5351858",
        "type": "function",
        "z": "465cfd27.107674",
        "name": "Parse MQTT",
        "func": "var topic = '';\nif (msg.topic == 'tutorial/web-app/green/ledState') topic = 'green/ledState';\nif (msg.topic == 'tutorial/web-app/green/ledToggle') topic = 'green/ledToggle';\nreturn {'topic':topic, 'payload':msg.payload};",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 580,
        "wires": [
            [
                "f4a9bd6c.67dcc"
            ]
        ]
    },
    {
        "id": "bab43b74.0562d8",
        "type": "function",
        "z": "465cfd27.107674",
        "name": "Button Debouncer",
        "func": "if (msg.payload == 0) return null;\nvar thisPress = new Date().getTime();\nvar lastPress = context.get('lastPress');\nif (lastPress == undefined) lastPress = 0;\nif ((thisPress - lastPress) < 500 ) return null;\nvar ledState  = flow.get('green/ledState');\nledState = ledState + 1;\nif (ledState > 2) ledState = 0;\ncontext.set('lastPress',thisPress);\nmsg.topic = 'green/ledState';\nmsg.payload = ledState;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 460,
        "wires": [
            [
                "f4a9bd6c.67dcc"
            ]
        ]
    },
    {
        "id": "15484110.1f934f",
        "type": "arduino in",
        "z": "465cfd27.107674",
        "name": "Button",
        "pin": "7",
        "state": "INPUT",
        "arduino": "a617aefc.4918d",
        "x": 90,
        "y": 460,
        "wires": [
            [
                "bab43b74.0562d8"
            ]
        ]
    },
    {
        "id": "a0b582cd.cc2bb",
        "type": "inject",
        "z": "465cfd27.107674",
        "name": "",
        "topic": "green/ledState",
        "payload": "1",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "x": 490,
        "y": 420,
        "wires": [
            [
                "f4a9bd6c.67dcc"
            ]
        ]
    },
    {
        "id": "67628328.a6b36c",
        "type": "arduino in",
        "z": "465cfd27.107674",
        "name": "Pot",
        "pin": "1",
        "state": "ANALOG",
        "arduino": "a617aefc.4918d",
        "x": 90,
        "y": 520,
        "wires": [
            [
                "4e8f7c96.0081d4"
            ]
        ]
    },
    {
        "id": "4e8f7c96.0081d4",
        "type": "function",
        "z": "465cfd27.107674",
        "name": "Pot Blocker",
        "func": "var lastReading = context.get('lastReading');\nif (lastReading == undefined) lastReading = -1;\nvar deltaReading = Math.abs(msg.payload - lastReading);\nif (deltaReading < 10 ) return null;\ncontext.set('lastReading', msg.payload);\nmsg.payload = Math.round(100.0 * (5.0 / 3.3) * msg.payload / 1024.0);\nmsg.topic = 'green/ledIntensity';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 520,
        "wires": [
            [
                "f4a9bd6c.67dcc"
            ]
        ]
    },
    {
        "id": "161fa862.59f298",
        "type": "inject",
        "z": "465cfd27.107674",
        "name": "Blinker",
        "topic": "blinker",
        "payload": "",
        "payloadType": "date",
        "repeat": "0.05",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 520,
        "y": 620,
        "wires": [
            [
                "f4a9bd6c.67dcc"
            ]
        ]
    },
    {
        "id": "f4a9bd6c.67dcc",
        "type": "function",
        "z": "465cfd27.107674",
        "name": "LED Controller",
        "func": "if (msg.topic != 'blinker') flow.set(msg.topic, msg.payload);\nvar ledValue = context.get('ledValue');\nif (ledValue == undefined) ledValue = -1;\nvar ledIntensity = flow.get('green/ledIntensity');\nif (ledIntensity == undefined) ledIntensity = 90;\nvar ledState = flow.get('green/ledState');\nif (ledState == undefined) ledState = 1;\nvar ledToggle = flow.get('green/ledToggle');\nif (ledToggle == undefined) ledToggle = 250;\nif (msg.topic != 'blinker')\n{\n    if (ledState == 0)\n    {\n        ledValue = 0;\n    }\n    if (ledState == 2) \n    {\n        ledValue = Math.round(ledIntensity * 255.0 / 100.0);\n    }\n}\nelse\n{\n    ledValue = -1;\n    var counter = context.get('counter');\n    if (counter == undefined) counter = 0;\n    if (ledState == 1)\n    {\n        if (counter == 0)\n        {\n            ledValue = Math.round(ledIntensity * 255.0 / 100.0);\n        }\n        if (counter == ledToggle)\n        {\n            ledValue = 0;\n        }\n    }\n    counter  = counter + 1;\n    if (counter > (ledToggle * 2)) counter = 0;\n    context.set('counter',counter);\n    \n    msg = null;\n}\nvar ledMsg = {'topic':'ledValue', 'payload':ledValue};\nif (ledValue < 0) ledMsg =  null;\nreturn [ledMsg, msg];",
        "outputs": 2,
        "noerr": 0,
        "x": 780,
        "y": 520,
        "wires": [
            [
                "2a11df35.783d9"
            ],
            [
                "b30a5728.842888"
            ]
        ]
    },
    {
        "id": "2a11df35.783d9",
        "type": "arduino out",
        "z": "465cfd27.107674",
        "name": "Led",
        "pin": "9",
        "state": "PWM",
        "arduino": "a617aefc.4918d",
        "x": 970,
        "y": 480,
        "wires": []
    },
    {
        "id": "85cb0420.0b4d98",
        "type": "inject",
        "z": "465cfd27.107674",
        "name": "",
        "topic": "green/ledToggle",
        "payload": "25",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "x": 480,
        "y": 380,
        "wires": [
            [
                "f4a9bd6c.67dcc"
            ]
        ]
    },
    {
        "id": "2c5ffced.556a84",
        "type": "inject",
        "z": "c43c3f4a.7aaaa",
        "name": "Rep",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": ".05",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "x": 250,
        "y": 220,
        "wires": [
            [
                "7c770730.f335b8"
            ]
        ]
    },
    {
        "id": "734e1059.e1b8f",
        "type": "function",
        "z": "c43c3f4a.7aaaa",
        "name": "Get Weight",
        "func": "var buffer = new Buffer([0x1b, 0x70]);\nreturn {'topic':'print','payload':buffer};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 610,
        "y": 220,
        "wires": [
            [
                "425d8acd.0d73d4"
            ]
        ]
    },
    {
        "id": "34aa89f2.6d01b6",
        "type": "function",
        "z": "c43c3f4a.7aaaa",
        "name": "Read Weight",
        "func": "var dataString = msg.payload;\nvar sign = +1;\nif (dataString.substring(0,1) == '-') sign = -1;\nvar weight = sign * Number(dataString.substring(2,9));\nvar unit = dataString.substring(9,12).trim();\nvar validData = true;\nvar timeStamp = new Date().getTime();\nif (unit.length < 1) validData = false;\nvar newMsg = {'topic':'weight','payload':{'value':weight,'unit':unit, 'validData':validData, 'timestamp':timeStamp}};\nflow.set('scaleReady',true);\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 120,
        "wires": [
            [
                "f8ddad93.65245"
            ]
        ]
    },
    {
        "id": "1c7ab4cd.47185b",
        "type": "function",
        "z": "c43c3f4a.7aaaa",
        "name": "Toggle Count",
        "func": "var buffer = new Buffer([0x1b, 0x72]);\nreturn {'topic':'print','payload':buffer};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "cd272bb9.d93f98",
        "type": "function",
        "z": "c43c3f4a.7aaaa",
        "name": "Toggle Units",
        "func": "var buffer = new Buffer([0x1b, 0x73]);\nreturn {'topic':'print','payload':buffer};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 400,
        "wires": [
            [
                "425d8acd.0d73d4"
            ]
        ]
    },
    {
        "id": "1e24cccc.dbb6f3",
        "type": "function",
        "z": "c43c3f4a.7aaaa",
        "name": "Tare",
        "func": "var buffer = new Buffer([0x1b, 0x74]);\nreturn {'topic':'print','payload':buffer};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 520,
        "wires": [
            [
                "425d8acd.0d73d4"
            ]
        ]
    },
    {
        "id": "f8ddad93.65245",
        "type": "mqtt out",
        "z": "c43c3f4a.7aaaa",
        "name": "",
        "topic": "gg-scale/01/weight",
        "qos": "0",
        "retain": "false",
        "broker": "db9f4882.52c9f8",
        "x": 710,
        "y": 120,
        "wires": []
    },
    {
        "id": "f08e17d9.c01088",
        "type": "mqtt in",
        "z": "c43c3f4a.7aaaa",
        "name": "",
        "topic": "gg-scale/01/tare",
        "qos": "0",
        "broker": "db9f4882.52c9f8",
        "x": 260,
        "y": 520,
        "wires": [
            [
                "1e24cccc.dbb6f3"
            ]
        ]
    },
    {
        "id": "da0ae035.daf85",
        "type": "mqtt in",
        "z": "c43c3f4a.7aaaa",
        "name": "",
        "topic": "gg-scale/01/toggleUnits",
        "qos": "0",
        "broker": "db9f4882.52c9f8",
        "x": 290,
        "y": 400,
        "wires": [
            [
                "cd272bb9.d93f98"
            ]
        ]
    },
    {
        "id": "561580dc.b897e",
        "type": "mqtt in",
        "z": "c43c3f4a.7aaaa",
        "name": "",
        "topic": "gg-scale/01/toggleCount",
        "qos": "0",
        "broker": "db9f4882.52c9f8",
        "x": 290,
        "y": 280,
        "wires": [
            [
                "1c7ab4cd.47185b"
            ]
        ]
    },
    {
        "id": "9697bf2a.66158",
        "type": "inject",
        "z": "c43c3f4a.7aaaa",
        "name": "toggleCount",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 270,
        "y": 340,
        "wires": [
            [
                "1c7ab4cd.47185b"
            ]
        ]
    },
    {
        "id": "942906b3.059488",
        "type": "inject",
        "z": "c43c3f4a.7aaaa",
        "name": "toggleUnits",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 270,
        "y": 460,
        "wires": [
            [
                "cd272bb9.d93f98"
            ]
        ]
    },
    {
        "id": "8b1f4321.c240c",
        "type": "inject",
        "z": "c43c3f4a.7aaaa",
        "name": "tare",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 250,
        "y": 580,
        "wires": [
            [
                "1e24cccc.dbb6f3"
            ]
        ]
    },
    {
        "id": "5107ec8b.1a1a64",
        "type": "inject",
        "z": "c43c3f4a.7aaaa",
        "name": "init",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 250,
        "y": 640,
        "wires": [
            [
                "7a19aa55.53c154"
            ]
        ]
    },
    {
        "id": "7a19aa55.53c154",
        "type": "function",
        "z": "c43c3f4a.7aaaa",
        "name": "Init scaleReady",
        "func": "flow.set('scaleReady',true);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 420,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "7c770730.f335b8",
        "type": "function",
        "z": "c43c3f4a.7aaaa",
        "name": "Check scale ready",
        "func": "if (!flow.get('scaleReady')) return null;\nflow.set('scaleReady',false);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 420,
        "y": 220,
        "wires": [
            [
                "734e1059.e1b8f"
            ]
        ]
    },
    {
        "id": "e3379b00.eb9b48",
        "type": "serial in",
        "z": "c43c3f4a.7aaaa",
        "name": "gg-scale-01",
        "serial": "e166c63b.f066a8",
        "x": 250,
        "y": 120,
        "wires": [
            [
                "34aa89f2.6d01b6"
            ]
        ]
    },
    {
        "id": "425d8acd.0d73d4",
        "type": "serial out",
        "z": "c43c3f4a.7aaaa",
        "name": "gg-scale-01",
        "serial": "e166c63b.f066a8",
        "x": 800,
        "y": 220,
        "wires": []
    },
    {
        "id": "d9840907.7665f8",
        "type": "serial in",
        "z": "2e881513.b5db6a",
        "name": "GeigerRead",
        "serial": "6ca1b8a9.c3e618",
        "x": 159,
        "y": 160.5,
        "wires": [
            [
                "42e13dbe.e65ea4"
            ]
        ]
    },
    {
        "id": "42e13dbe.e65ea4",
        "type": "mqtt out",
        "z": "2e881513.b5db6a",
        "name": "",
        "topic": "geiger01",
        "qos": "0",
        "retain": "false",
        "broker": "db9f4882.52c9f8",
        "x": 400,
        "y": 160,
        "wires": []
    }
]